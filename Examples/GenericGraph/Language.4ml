domain Language {

// FCO
FCO ::= new (
id: String,
parent: any languageTYPE + {NULL},
attributes: any Attr__FCO,
pointers: any Ptr__FCO
).
Attr__FCO ::= new (
  name: String
).
Ptr__FCO ::= new (
  base: any FCOTYPE + {NULL}
).
FCOTYPE ::= FCO + language + Graph + Vertex + Graphs + Edge.
// FCO - end

// language
language ::= new (
id: String,
parent: any languageTYPE + {NULL},
attributes: any Attr__language,
pointers: any Ptr__language
).
Attr__language ::= new (
  name: String
).
Ptr__language ::= new (
  base: any FCOTYPE + {NULL}
).
languageTYPE ::= language.
// language - end

// Graph
Graph ::= new (
id: String,
parent: any languageTYPE + GraphsTYPE + {NULL},
attributes: any Attr__Graph,
pointers: any Ptr__Graph
).
Attr__Graph ::= new (
  name: String
).
Ptr__Graph ::= new (
  base: any FCOTYPE + {NULL}
).
GraphTYPE ::= Graph.
// Graph - end

// Vertex
Vertex ::= new (
id: String,
parent: any languageTYPE + GraphTYPE + {NULL},
attributes: any Attr__Vertex,
pointers: any Ptr__Vertex
).
Attr__Vertex ::= new (
  name: String
).
Ptr__Vertex ::= new (
  base: any FCOTYPE + {NULL}
).
VertexTYPE ::= Vertex.
// Vertex - end

// Graphs
Graphs ::= new (
id: String,
parent: any languageTYPE + {NULL},
attributes: any Attr__Graphs,
pointers: any Ptr__Graphs
).
Attr__Graphs ::= new (
  name: String
).
Ptr__Graphs ::= new (
  base: any FCOTYPE + {NULL}
).
GraphsTYPE ::= Graphs.
// Graphs - end

// Edge
Edge ::= new (
id: String,
parent: any languageTYPE + GraphTYPE + {NULL},
attributes: any Attr__Edge,
pointers: any Ptr__Edge
).
Attr__Edge ::= new (
  name: String
).
Ptr__Edge ::= new (
  base: any FCOTYPE + {NULL},
  dst: any VertexTYPE + {NULL},
  src: any VertexTYPE + {NULL}
).
EdgeTYPE ::= Edge.
// Edge - end

// The representation of all nodes: GMENode
GMENode ::= FCO + language + Graph + Vertex + Graphs + Edge.

// The representation of the containment relation: GMEContainment
GMEContainment ::= (child: GMENode, parent:GMENode + {NULL}).
GMEContainment(child, parent) :- child is GMENode, parent = child.parent ;
GMEContainment(child, x), GMEContainment(x, parent).

// The representation of the inheritance relation: GMEInheritance
GMEInheritance ::= (node: GMENode, base: GMENode + {NULL}).
GMEInheritance(node, base) :- node is GMENode, base = node.pointers.base ;
GMEInheritance(node, x), GMEInheritance(x, base).
}