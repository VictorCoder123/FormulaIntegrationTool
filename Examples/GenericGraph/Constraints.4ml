domain Constraints extends Language at "Language.4ml" 
{
reachable ::= new(x: Vertex, y:Vertex).
reachable(x,y) :- x is Vertex, 
y is Vertex, x.parent = y.parent, e is Edge, e.parent = x.parent, e.pointers.src = x, e.pointers.dst = y.
reachable(x,y) :- reachable(x,z), reachable(z,y), x != y.
reachable(x,y) :- reachable(y,x).

unreachable ::= new(x: Vertex, y: Vertex).
unreachable(x,y) :- x is Vertex, y is Vertex, no reachable(x,y).

disjoint ::= new(g: Graph).
disjoint(g) :- g is Graph, v1 is Vertex, v2 is Vertex, v1 != v2, v1.parent = g, v2.parent = g, unreachable(v1,v2).

connected ::= new(g: Graph).
connected(g) :- g is Graph, no disjoint(g).

incycle ::= new (v: Vertex).
incycle(v) :- v is Vertex, reachable(v,v).

hascycle ::= new (g: Graph).
hascycle(g) :- g is Graph, v3 is Vertex, v3.parent = g, incycle(v3).

acyclic ::= new (g: Graph).
acyclic(g) :- g is Graph, no hascycle(g).

constraint1 :- node_v1 is Vertex, node_v1.id = "/6/A/J", 
node_v3 is Vertex, node_v3.id = "/6/A/l", unreachable(node_v1,node_v3).

constraint2 :- node_Disjoint is Graph, node_Disjoint.id = "/6/A", disjoint(node_Disjoint).

constraint3 :- node_Circle is Graph, node_Circle.id = "/6/U", connected(node_Cirle).

constraint4 :- node_Tree is Graph, node_Tree.id = "/6/f", connected(node_Tree).

constraint5 :- node_Tree is Graph, node_Tree.id = "/6/f", acyclic(node_Tree).

constraints6 :- node_SelfCircle is Graph, node_SelfCircle.id = "/6/b", hascycle(node_SelfCircle).
}